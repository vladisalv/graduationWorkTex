Параллельная реализация программы выполнена на С++ с использованием технологии параллельного программирования MPI и технологии CUDA-C для использования графических ускорителей Nvidia.

Параллельный алгоритм разрабатывался таким способом, чтобы выполнялись следующие условия:
- автономность каждого этапа вычислений
- возможность загрузки/сохранения данных на каждом этапе
- унифицированный доступ к ресурсам системы

В результате была разработана следующая структура классов:
рисунок диаграмма, где выделены сущности, вычислители, управляющие и шаблонные (описывают распределенные данные)

Общая схема работы программы выглядит следующим образом:
рисунок блок-схема этапов работы программы

Данная схема работы позволяет начать и завершить работу на любом этапе, ограничившись выполнением только нескольких этапов. Такая гибкость программы может быть очень полезна в случае, когда пользователь захочет посмотреть на результат работы программы при разных параметрах. Например, если интересно посмотреть на поведение программы при разном значении ерс, то достаточно один раз сохранить спектры и в дальнейшем запускать программу сразу с этапа построения гомологической матрицы.

В целом программа выполнена в виде набора библиотечных функций, поэтому если пользователю потребуется специфичная версия программы, то относительно просто и в кротчайшие сроки такая версия может быть реализована.


использовалась мпай работа с файлами
формат сохранения разный (бмп файлы)
использовалась технология одностронних коммуникаций. все пересылки ассинхронные

Выделение в отдельные классы 
что можно отдельно компилить мпай, гпу
что именно использовалось при реализации на гпу
графические интерфейсы
что графические интерфейсы построены на мощном cli
что заплин установщик, документирован код
кода много



